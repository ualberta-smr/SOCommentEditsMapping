AnswerId,CommentId,AnswerAuthor,CommentAuthor,CommentIndex,CommentDate,Comment Score,Comment,Comment Groups,Has edits after,"Edit Groups (EditId, Matched Groups)",Edits by author,Edits by others,"Comment mentions/replies (mentioned user, comment author)"
21616398,36642065,Eric Baker,Alexis C.,1,2014-05-22 22:01:51.957000,44,"Or less cumbersome, `Arrays.stream(strArray).forEach(System.out::println);`","{'forEach', 'System.out', 'stream(strArray)', 'Arrays.stream', 'strArray', 'Arrays.stream(strArray)', ')', 'forEach(System.out::println)', 'Arrays.stream(strArray).forEach(System.out::println);'}",True,"[(2, {'System.out', 'stream(strArray)', 'Arrays.stream', 'Arrays.stream(strArray)', 'forEach(System.out::println)'})]",0,1,
21616398,40622086,Eric Baker,Boris the Spider,2,2014-09-20 09:11:49.203000,7,This is clumsy. It should be `System.out::println` which is a Java 8 method reference. You code produces an unnecessary lambda.,"{'System.out', ' ', 'a ', 'Java', 'System.out::println'}",True,"[(2, {'System.out'})]",0,1,
21616398,59284899,Eric Baker,Justin,3,2016-03-04 23:16:07.493000,1,Just skip the `Arrays.asList` and do `Arrays.stream(strArray).forEach(System.out::println)`,"{'forEach', 'System.out', 'stream(strArray)', 'Arrays.asList', 'Arrays.stream', 'strArray', 'Arrays.stream(strArray)', ')', 'forEach(System.out::println)', 'asList', 'Arrays.stream(strArray).forEach(System.out::println)'}",True,"[(2, {'System.out', 'stream(strArray)', 'Arrays.stream', 'Arrays.stream(strArray)', 'forEach(System.out::println)'})]",0,1,
21616398,60134092,Eric Baker,Yassin Hajaj,4,2016-03-27 20:23:16.013000,0,"@AlexisC. Even better, `Stream.of`",{'Stream.of'},True,"[(2, {'Stream.of'})]",0,1,
21616398,60134143,Eric Baker,Alexis C.,5,2016-03-27 20:25:25.777000,0,@YassinHajaj Why better?,,False,,0,0,"[('@YassinHajaj', 'Alexis C.')]"
21616398,60134189,Eric Baker,Yassin Hajaj,6,2016-03-27 20:27:10.240000,1,@AlexisC. Because it can also be used with other objects than arrays.,,False,,0,0,
21616398,60134251,Eric Baker,Alexis C.,7,2016-03-27 20:30:14.300000,0,"@YassinHajaj Yes, but the question specifically ask for an array. If you have an array, it's better to use `Arrays.stream` than `Stream.of`.","{'Stream.of', 'Arrays.stream'}",False,,0,0,"[('@YassinHajaj', 'Alexis C.')]"
21616398,60134273,Eric Baker,Yassin Hajaj,8,2016-03-27 20:31:11.713000,0,@AlexisC. Is it better in terms of performance or just within the scope of this question?,,False,,0,0,
21616398,60134466,Eric Baker,Alexis C.,9,2016-03-27 20:41:00.993000,1,"@YassinHajaj Both. For instance if you want to have a range stream over the array the idiomatic way using `Stream.of` would be to do `.skip(n).limit(m)`. The current implementation does not return a SIZED stream whereas `Arrays.stream(T[], int, int)` does, leading to better splitting performances if you want to perform operations in parallel. Also if you have an `int[]`, you may accidentally use `Stream.of` which will return a `Stream<int[]>` with a single element, while `Arrays.stream` will give you an `IntStream` directly.","{'.skip(n).limit(m)', 'Arrays.stream', 'return', 'a', 'return a', '.limit(m)', 'int[]', 'skip(n)', 'Stream.of', '.skip(n)', 'limit(m)', 'Stream<int[]>', 'stream(T[], int, int)', 'Arrays.stream(T[], int, int)', 'IntStream'}",False,,0,0,"[('@YassinHajaj', 'Alexis C.')]"
21616398,84746423,Eric Baker,Alex,10,2018-02-19 17:35:33.680000,0,Why use a `Stream` if you want to get a string? Especially if the `Arrays` class has a `toString` method?,"{'toString', 'Arrays', 'Stream'}",False,,0,0,
