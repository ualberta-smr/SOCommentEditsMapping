AnswerId,CommentId,AnswerAuthor,CommentAuthor,CommentIndex,CommentDate,Comment Score,Comment,Comment Groups,Has edits after,"Edit Groups (EditId, Matched Groups)",Edits by author,Edits by others,"Comment mentions/replies (mentioned user, comment author)"
16184827,23161186,atlaste,Dustin Oprea,1,2013-04-24 17:50:33.540000,46,"You want to bypass the branch-predictor, why? It's an optimization.",,True,,1,3,
16184827,23168606,atlaste,atlaste,2,2013-04-24 21:57:13.867000,90,"Because no branch is better than a branch :-) In a lot of situations this is simply a lot faster... if you're optimizing, it's definitely worth a try. They also use it quite a bit in f.ex. http://graphics.stanford.edu/~seander/bithacks.html",{'f.ex'},True,,1,3,"[('N/A', 'atlaste')]"
16184827,30989994,atlaste,Zain Rizvi,3,2013-12-19 21:45:03.287000,25,"In general lookup tables can be fast, but have you ran the tests for this particular condition? You'll still have a branch condition in your code, only now it's moved to the look up table generation part.  You still wouldn't get your perf boost",,True,,1,3,
16184827,31021845,atlaste,atlaste,4,2013-12-20 18:57:29.683000,26,"@Zain if you really want to know... Yes: 15 seconds with the branch and 10 with my version. Regardless, it's a useful technique to know either way.",,True,,1,3,
16184827,33971695,atlaste,Kris Vandermotten,5,2014-03-12 12:17:49.593000,32,"Why not `sum += lookup[data[j]]` where `lookup` is an array with 256 entries, the first ones being zero and the last ones being equal to the index?","{'lookup', 'sum += lookup[data[j]]', 'sum'}",True,"[(2, {'sum += lookup[data[j]]'})]",1,3,
16184827,34147763,atlaste,atlaste,6,2014-03-17 10:24:45.547000,0,@KrisVandermotten +1 for that - I made a bug implementing it by checking the index of j; it should have been `lookup[data[j]]` as you suggest instead.,{'lookup[data[j]]'},True,,0,3,"[('@KrisVandermotten', 'atlaste')]"
16184827,34163618,atlaste,Kris Vandermotten,7,2014-03-17 17:17:02.867000,1,"You say ""There has been quite some work on eliminating this branch for managed languages."" Sure, but that won't help with `sum += lookup[data[j]];`. However, what will help is that the lookup will never go out of bounds in a bug free program, so the branch predictor can predict the branch perfectly. And that means speed!","{'sum += lookup[data[j]];', 'sum += lookup[data[j]]', 'sum'}",True,,0,3,
16184827,34186122,atlaste,atlaste,8,2014-03-18 08:33:51.967000,0,"@KrisVandermotten Yes, that's correct. What would also help in this case is use the correct data type (e.g. `byte[] data`); that would eliminate the branch completely, which means more speed. :-) Basically I always assume that if (1) you're in a tight loop with a limited amount of code (such as here) and (2) if you could predict the branches with 'static code analysis', then the processor / JIT'ter will do their work properly.",{'byte[] data'},True,,0,3,"[('@KrisVandermotten', 'atlaste')]"
16184827,54496004,atlaste,A. Binzxxxxxx,9,2015-10-26 16:06:42.273000,0,array access means pointer operation like *(ptr + x) - right? tannery operator should be faster here - right?,,True,,0,3,
16184827,61960861,atlaste,Chinaxing,10,2016-05-13 16:15:48.537000,0,"but the lookup method will need the jump instruction to jump to the target codes. this place have the unconditional jump, the cpu will always clean its pipeline in this case ? which will be bad than if prediction when the prediction hit. is this right?",,True,,0,3,
